version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: webrtc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: webrtc_signaling
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - webrtc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d webrtc_signaling"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: webrtc_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - webrtc_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # WebRTC Signaling Server (Development)
  signaling-server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: webrtc_signaling_server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/webrtc_signaling
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-dev
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production-dev
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - webrtc_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Commander (Optional - Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: webrtc_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    networks:
      - webrtc_network
    depends_on:
      - redis
    profiles:
      - tools

  # pgAdmin (Optional - PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: webrtc_pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@webrtc.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_DISABLE_POSTFIX: "true"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - webrtc_network
    depends_on:
      - postgres
    profiles:
      - tools

# Named volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  webrtc_network:
    driver: bridge
